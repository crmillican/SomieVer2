import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Zap, Info, RefreshCw, DollarSign, Users, BarChart, DownloadCloud, Sparkles } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

interface MetricsOptimizerProps {
  onParamsGenerated?: (params: OptimizedParameters) => void;
  initialValues?: Partial<OptimizerInputs>;
  className?: string;
}

interface OptimizerInputs {
  budget: number;
  targetAudience: number;
  industry: string;
  marketingGoal: "awareness" | "engagement" | "sales";
  campaignDuration: number;
  contentType: "image" | "video" | "story" | "multiple";
}

export interface OptimizedParameters {
  audienceSize: {
    min: number;
    ideal: number;
    max: number;
  };
  engagementRate: {
    min: number;
    ideal: number;
  };
  postsRequired: number;
  timeframe: number;
  suggestedReward: string;
  estimatedROI: string;
  audienceReach: number;
  confidence: number;
}

// Industry data for intelligent suggestions
const industryData = {
  "fashion": {
    avgEngagementRate: 4.6,
    costPerThousand: 8.5,
    recommendedInfluencerSize: "micro",
    contentEffectiveness: { "image": 0.8, "video": 0.9, "story": 0.7, "multiple": 1.0 }
  },
  "beauty": {
    avgEngagementRate: 5.2,
    costPerThousand: 9.2,
    recommendedInfluencerSize: "micro",
    contentEffectiveness: { "image": 0.8, "video": 1.0, "story": 0.7, "multiple": 0.9 }
  },
  "fitness": {
    avgEngagementRate: 6.3,
    costPerThousand: 7.8,
    recommendedInfluencerSize: "micro",
    contentEffectiveness: { "image": 0.7, "video": 1.0, "story": 0.6, "multiple": 0.8 }
  },
  "food": {
    avgEngagementRate: 5.8,
    costPerThousand: 6.5,
    recommendedInfluencerSize: "micro",
    contentEffectiveness: { "image": 0.9, "video": 0.8, "story": 0.6, "multiple": 0.9 }
  },
  "travel": {
    avgEngagementRate: 5.0,
    costPerThousand: 10.2,
    recommendedInfluencerSize: "micro",
    contentEffectiveness: { "image": 0.9, "video": 1.0, "story": 0.7, "multiple": 0.8 }
  },
  "tech": {
    avgEngagementRate: 3.8,
    costPerThousand: 12.5,
    recommendedInfluencerSize: "mid",
    contentEffectiveness: { "image": 0.7, "video": 0.9, "story": 0.5, "multiple": 0.8 }
  },
  "gaming": {
    avgEngagementRate: 4.2,
    costPerThousand: 11.0,
    recommendedInfluencerSize: "mid",
    contentEffectiveness: { "image": 0.6, "video": 1.0, "story": 0.5, "multiple": 0.8 }
  },
  "other": {
    avgEngagementRate: 4.5,
    costPerThousand: 8.0,
    recommendedInfluencerSize: "micro",
    contentEffectiveness: { "image": 0.8, "video": 0.8, "story": 0.6, "multiple": 0.8 }
  }
};

// Marketing goal multipliers for smart optimization
const goalMultipliers = {
  "awareness": { engagementWeight: 0.7, reachWeight: 1.0, costWeight: 0.8 },
  "engagement": { engagementWeight: 1.0, reachWeight: 0.7, costWeight: 0.8 },
  "sales": { engagementWeight: 0.9, reachWeight: 0.8, costWeight: 1.0 }
};

export function MetricsOptimizer({ onParamsGenerated, initialValues, className }: MetricsOptimizerProps) {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [inputs, setInputs] = useState<OptimizerInputs>({
    budget: initialValues?.budget || 500,
    targetAudience: initialValues?.targetAudience || 10000,
    industry: initialValues?.industry || "fashion",
    marketingGoal: initialValues?.marketingGoal || "awareness",
    campaignDuration: initialValues?.campaignDuration || 14,
    contentType: initialValues?.contentType || "multiple",
  });
  
  const [optimizedParams, setOptimizedParams] = useState<OptimizedParameters | null>(null);
  const [businessUrl, setBusinessUrl] = useState<string>("");
  const [isScrapingMetadata, setIsScrapingMetadata] = useState<boolean>(false);
  const [autoGeneratedDescription, setAutoGeneratedDescription] = useState<string>("");
  const [suggestedTitle, setSuggestedTitle] = useState<string>("");
  
  // Calculate params when any input changes or on demand
  const calculateOptimizedParameters = () => {
    setIsLoading(true);
    
    // Simulate API call with setTimeout
    setTimeout(() => {
      try {
        const industry = industryData[inputs.industry as keyof typeof industryData] || industryData.other;
        const goalMultiplier = goalMultipliers[inputs.marketingGoal];
        const contentEffectiveness = industry.contentEffectiveness[inputs.contentType];
        
        // Smart calculations based on industry data and user inputs
        const budgetPerInfluencer = inputs.budget > 1000 ? inputs.budget * 0.2 : inputs.budget * 0.8;
        const campaignEfficiency = Math.min(1, inputs.campaignDuration / 30) * contentEffectiveness;
        
        // Calculate ideal follower range based on budget and industry CPM
        const idealFollowers = Math.round(budgetPerInfluencer / (industry.costPerThousand * 0.001));
        const minFollowers = Math.round(idealFollowers * 0.7);
        const maxFollowers = Math.round(idealFollowers * 1.5);
        
        // Calculate ideal engagement rate based on industry average and goal
        const idealEngagement = Math.round((industry.avgEngagementRate * goalMultiplier.engagementWeight * 10)) / 10;
        const minEngagement = Math.round((idealEngagement * 0.8) * 10) / 10;
        
        // Determine post requirements based on campaign duration and content type
        const postsRequired = Math.max(1, Math.round(inputs.campaignDuration / 7) + (inputs.contentType === "multiple" ? 1 : 0));
        
        // Calculate estimated results
        const estimatedReach = idealFollowers * postsRequired * campaignEfficiency;
        const reachPercentage = Math.min(100, Math.round((estimatedReach / inputs.targetAudience) * 100));
        
        // Calculate suggested reward based on follower count and industry standards
        const suggestedReward = idealFollowers < 5000 
          ? `$${Math.round(budgetPerInfluencer / postsRequired)}/post` 
          : `$${Math.round(budgetPerInfluencer)}`;
        
        // Calculate expected ROI
        const expectedROI = `${Math.round(100 + (reachPercentage * campaignEfficiency * goalMultiplier.reachWeight))}%`;
        
        // Calculate confidence score (0-100)
        const confidence = Math.min(95, Math.round(
          (campaignEfficiency * 100) * 
          (inputs.budget > 300 ? 1 : 0.8) * 
          (inputs.campaignDuration > 10 ? 1 : 0.7)
        ));
        
        const optimizedParams: OptimizedParameters = {
          audienceSize: {
            min: minFollowers,
            ideal: idealFollowers,
            max: maxFollowers
          },
          engagementRate: {
            min: minEngagement,
            ideal: idealEngagement
          },
          postsRequired,
          timeframe: inputs.campaignDuration,
          suggestedReward,
          estimatedROI: expectedROI,
          audienceReach: estimatedReach,
          confidence
        };
        
        setOptimizedParams(optimizedParams);
        
        if (onParamsGenerated) {
          onParamsGenerated(optimizedParams);
        }
        
        toast({
          title: "Parameters optimized",
          description: "We've calculated the optimal parameters based on your inputs",
        });
      } catch (error) {
        console.error("Error calculating parameters:", error);
        toast({
          title: "Calculation error",
          description: "There was a problem calculating your parameters",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    }, 1200);
  };
  
  // Function to fetch content suggestions from a URL
  const fetchContentSuggestions = async () => {
    if (!businessUrl) return;
    
    setIsScrapingMetadata(true);
    
    try {
      const res = await fetch('/api/business/suggest-content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          url: businessUrl,
          businessName: '',
          industry: inputs.industry || '',
          description: ''
        })
      });
      
      if (!res.ok) {
        throw new Error('Failed to get content suggestions');
      }
      
      const data = await res.json();
      
      if (data.status === 'success' && data.data) {
        const suggestions = data.data;
        
        // Update suggested content
        if (suggestions.description) {
          setAutoGeneratedDescription(suggestions.description);
        }
        
        if (suggestions.title) {
          setSuggestedTitle(suggestions.title);
        }
        
        // Update relevant optimizer inputs based on suggestions
        if (suggestions.niche) {
          setInputs(prev => ({...prev, industry: suggestions.niche}));
        }
        
        if (suggestions.recommendedBudget > 0) {
          setInputs(prev => ({...prev, budget: suggestions.recommendedBudget}));
        }
        
        toast({
          title: "Content suggestions loaded",
          description: "We've analyzed your business website and generated suggestions",
        });
      }
    } catch (error) {
      console.error('Error getting content suggestions:', error);
      toast({
        title: "Couldn't analyze website",
        description: "We had trouble extracting information from this URL",
        variant: "destructive",
      });
    } finally {
      setIsScrapingMetadata(false);
    }
  };
  
  // Run initial calculation on mount if initial values are provided
  useEffect(() => {
    if (initialValues && Object.keys(initialValues).length > 0) {
      calculateOptimizedParameters();
    }
  }, []);
  
  return (
    <div className={className}>
      <Card className="w-full">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-xl flex items-center">
                <Zap className="h-5 w-5 mr-2 text-primary" />
                Smart Campaign Optimizer
              </CardTitle>
              <CardDescription>
                Tell us what you know, we'll optimize the rest
              </CardDescription>
            </div>
            {optimizedParams && (
              <Badge variant="outline" className="flex items-center gap-1">
                <BarChart className="h-3 w-3" />
                {optimizedParams.confidence}% confidence
              </Badge>
            )}
          </div>
        </CardHeader>
        <CardContent className="space-y-5">
          {/* Website URL auto-scraper section */}
          <div className="mb-6 space-y-3">
            <div className="flex items-center justify-between">
              <Label htmlFor="business-url">Business Website URL (Optional)</Label>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger>
                    <Info className="h-4 w-4 text-muted-foreground" />
                  </TooltipTrigger>
                  <TooltipContent>
                    <p className="w-[220px] text-xs">
                      Enter your business website URL to let us automatically suggest the best content for your offer
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            <div className="flex items-center gap-2">
              <div className="relative flex-1">
                <Input
                  id="business-url"
                  className="pr-12"
                  placeholder="https://yourbusiness.com"
                  value={businessUrl}
                  onChange={(e) => setBusinessUrl(e.target.value)}
                />
              </div>
              <Button 
                size="sm" 
                variant="outline"
                onClick={fetchContentSuggestions}
                disabled={!businessUrl || isScrapingMetadata}
                className="whitespace-nowrap"
              >
                {isScrapingMetadata ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Auto-Suggest
                  </>
                )}
              </Button>
            </div>
            
            {/* Show auto-generated content if available */}
            {(autoGeneratedDescription || suggestedTitle) && (
              <div className="p-3 bg-primary/5 rounded-md mt-2 border border-primary/20">
                <h4 className="font-medium text-sm flex items-center gap-1 mb-2">
                  <Sparkles className="h-3.5 w-3.5 text-primary" />
                  AI-Generated Suggestions
                </h4>
                <div className="space-y-2 text-sm">
                  {suggestedTitle && (
                    <div>
                      <span className="font-medium">Title:</span> {suggestedTitle}
                    </div>
                  )}
                  {autoGeneratedDescription && (
                    <div>
                      <span className="font-medium">Description:</span> {autoGeneratedDescription}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="budget">Campaign Budget</Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <Info className="h-4 w-4 text-muted-foreground" />
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="w-[200px] text-xs">
                        Your total campaign budget will help determine the optimal influencer size and rewards
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="relative">
                <DollarSign className="w-4 h-4 absolute left-3 top-[10px] text-muted-foreground" />
                <Input
                  id="budget"
                  className="pl-8"
                  placeholder="500"
                  value={inputs.budget}
                  onChange={(e) => {
                    const value = e.target.value;
                    // Allow empty string or convert to number
                    setInputs({ ...inputs, budget: value === '' ? 0 : Number(value) });
                  }}
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="targetAudience">Target Audience Size</Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <Info className="h-4 w-4 text-muted-foreground" />
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="w-[200px] text-xs">
                        Estimated size of the audience you want to reach with this campaign
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="relative">
                <Users className="w-4 h-4 absolute left-3 top-[10px] text-muted-foreground" />
                <Input
                  id="targetAudience"
                  className="pl-8"
                  placeholder="10000"
                  value={inputs.targetAudience}
                  onChange={(e) => {
                    const value = e.target.value;
                    setInputs({ ...inputs, targetAudience: value === '' ? 0 : Number(value) });
                  }}
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="industry">Industry</Label>
              <Select
                value={inputs.industry}
                onValueChange={(value) => setInputs({ ...inputs, industry: value })}
              >
                <SelectTrigger id="industry">
                  <SelectValue placeholder="Select industry" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="fashion">Fashion</SelectItem>
                  <SelectItem value="beauty">Beauty & Cosmetics</SelectItem>
                  <SelectItem value="fitness">Fitness & Health</SelectItem>
                  <SelectItem value="food">Food & Beverage</SelectItem>
                  <SelectItem value="travel">Travel</SelectItem>
                  <SelectItem value="tech">Technology</SelectItem>
                  <SelectItem value="gaming">Gaming</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="marketingGoal">Primary Goal</Label>
              <Select
                value={inputs.marketingGoal}
                onValueChange={(value: "awareness" | "engagement" | "sales") => 
                  setInputs({ ...inputs, marketingGoal: value })}
              >
                <SelectTrigger id="marketingGoal">
                  <SelectValue placeholder="Select goal" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="awareness">Brand Awareness</SelectItem>
                  <SelectItem value="engagement">Engagement & Interaction</SelectItem>
                  <SelectItem value="sales">Conversions & Sales</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="campaignDuration">Campaign Duration (days)</Label>
                <span className="text-sm text-muted-foreground">{inputs.campaignDuration} days</span>
              </div>
              <Slider
                id="campaignDuration"
                min={1}
                max={90}
                step={1}
                value={[inputs.campaignDuration]}
                onValueChange={(value) => setInputs({ ...inputs, campaignDuration: value[0] })}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="contentType">Content Type</Label>
              <Select
                value={inputs.contentType}
                onValueChange={(value: "image" | "video" | "story" | "multiple") => 
                  setInputs({ ...inputs, contentType: value })}
              >
                <SelectTrigger id="contentType">
                  <SelectValue placeholder="Select content type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="image">Static Images</SelectItem>
                  <SelectItem value="video">Video Content</SelectItem>
                  <SelectItem value="story">Stories/Reels</SelectItem>
                  <SelectItem value="multiple">Multiple Formats</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          {optimizedParams && (
            <Card className="mt-6 bg-muted/40">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Optimized Parameters</CardTitle>
                <CardDescription>
                  These parameters have been intelligently calculated for your specific needs
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-3">
                    <div>
                      <div className="text-sm font-medium mb-1">Recommended Audience Size</div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Ideal:</span>
                        <span className="font-semibold">{optimizedParams.audienceSize.ideal.toLocaleString()} followers</span>
                      </div>
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>Range:</span>
                        <span>{optimizedParams.audienceSize.min.toLocaleString()} - {optimizedParams.audienceSize.max.toLocaleString()}</span>
                      </div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium mb-1">Engagement Rate Requirements</div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Ideal:</span>
                        <span className="font-semibold">{optimizedParams.engagementRate.ideal}%</span>
                      </div>
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>Minimum:</span>
                        <span>{optimizedParams.engagementRate.min}%</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <div className="text-sm font-medium mb-1">Content Requirements</div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Posts:</span>
                        <span className="font-semibold">{optimizedParams.postsRequired}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Timeframe:</span>
                        <span className="font-semibold">{optimizedParams.timeframe} days</span>
                      </div>
                    </div>
                    
                    <div>
                      <div className="text-sm font-medium mb-1">Reward & Results</div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Suggested Reward:</span>
                        <span className="font-semibold">{optimizedParams.suggestedReward}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Estimated ROI:</span>
                        <span className="font-semibold">{optimizedParams.estimatedROI}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span>Potential Reach:</span>
                        <span className="font-semibold">{optimizedParams.audienceReach.toLocaleString()}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </CardContent>
        <CardFooter className="flex justify-end">
          <Button 
            onClick={calculateOptimizedParameters}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                Optimizing...
              </>
            ) : (
              <>
                <Zap className="mr-2 h-4 w-4" />
                Calculate Optimal Parameters
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}